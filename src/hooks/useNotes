import { useEffect, useState } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

const NOTES_STORAGE_KEY = '@recipe_notes';


type NotesMap = {
    [recipeId: string]: string;
};

const useNotes = () => {
    const [notes, setNotes] = useState<NotesMap>({});


    useEffect(() => {
        loadNotes();
    }, []);

    const loadNotes = async () => {
        try {
            const storedNotes = await AsyncStorage.getItem(NOTES_STORAGE_KEY);
            if (storedNotes) {
                setNotes(JSON.parse(storedNotes));
            }
        } catch (error) {
            console.error('Failed to load notes', error);
        }
    };

    const saveNote = async (recipeId: string, note: string) => {
        try {
            const updatedNotes = { ...notes, [recipeId]: note };
            setNotes(updatedNotes);
            await AsyncStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(updatedNotes));
        } catch (error) {
            console.error('Failed to save note', error);
        }
    };

    const getNote = (recipeId: string): string => {
        return notes[recipeId] || '';
    };

    const deleteNote = async (recipeId: string) => {
        try {
            const updatedNotes = { ...notes };
            delete updatedNotes[recipeId];
            setNotes(updatedNotes);
            await AsyncStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(updatedNotes));
        } catch (error) {
            console.error('Failed to delete note', error);
        }
    };

    return {
        saveNote,
        getNote,
        deleteNote
    };
};

export default useNotes;